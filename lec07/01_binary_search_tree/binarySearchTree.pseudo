// binarySearchTree.pseudo

구조체 노드:
  데이터
  왼쪽자식포인터
  오른쪽자식포인터
끝

함수 새노드생성(값):
  시작
    새노드 = 메모리할당(노드크기)
    새노드.데이터 = 값
    새노드.왼쪽자식포인터 = NULL
    새노드.오른쪽자식포인터 = NULL
    return 새노드
  끝

함수 삽입(루트, 값):
  시작
    if 루트 == NULL:
      return 새노드생성(값)
    
    if 값 < 루트.데이터:
      루트.왼쪽자식포인터 = 삽입(루트.왼쪽자식포인터, 값)
    else if 값 > 루트.데이터:
      루트.오른쪽자식포인터 = 삽입(루트.오른쪽자식포인터, 값)
    
    return 루트
  끝

함수 최솟값찾기(노드):
  시작
    while 노드.왼쪽자식포인터 != NULL:
      노드 = 노드.왼쪽자식포인터
    return 노드
  끝

함수 삭제(루트, 값):
  시작
    if 루트 == NULL:
      return 루트
    
    if 값 < 루트.데이터:
      루트.왼쪽자식포인터 = 삭제(루트.왼쪽자식포인터, 값)
    else if 값 > 루트.데이터:
      루트.오른쪽자식포인터 = 삭제(루트.오른쪽자식포인터, 값)
    else:
      // 삭제할 노드 발견
      if 루트.왼쪽자식포인터 == NULL:
        임시노드 = 루트.오른쪽자식포인터
        메모리해제(루트)
        return 임시노드
      else if 루트.오른쪽자식포인터 == NULL:
        임시노드 = 루트.왼쪽자식포인터
        메모리해제(루트)
        return 임시노드
      
      // 자식이 둘 다 있는 경우
      임시노드 = 최솟값찾기(루트.오른쪽자식포인터)
      루트.데이터 = 임시노드.데이터
      루트.오른쪽자식포인터 = 삭제(루트.오른쪽자식포인터, 임시노드.데이터)
    
    return 루트
  끝

함수 중위순회(루트):
  시작
    if 루트 != NULL:
      중위순회(루트.왼쪽자식포인터)
      출력(루트.데이터)
      중위순회(루트.오른쪽자식포인터)
  끝

함수 전위순회(루트):
  시작
    if 루트 != NULL:
      출력(루트.데이터)
      전위순회(루트.왼쪽자식포인터)
      전위순회(루트.오른쪽자식포인터)
  끝

함수 후위순회(루트):
  시작
    if 루트 != NULL:
      후위순회(루트.왼쪽자식포인터)
      후위순회(루트.오른쪽자식포인터)
      출력(루트.데이터)
  끝

함수 트리출력(루트, 공백, 마지막여부):
  시작
    if 루트 != NULL:
      출력(공백)
      if 마지막여부:
        출력("└── ")
        공백 = 공백 + "    "
      else:
        출력("├── ")
        공백 = 공백 + "│   "
      
      출력(루트.데이터)
      출력(줄바꿈)
      
      if 루트.왼쪽자식포인터 != NULL 또는 루트.오른쪽자식포인터 != NULL:
        트리출력(루트.왼쪽자식포인터, 공백, 루트.오른쪽자식포인터 == NULL)
        트리출력(루트.오른쪽자식포인터, 공백, true)
  끝

함수 트리전체삭제(루트):
  시작
    if 루트 != NULL:
      트리전체삭제(루트.왼쪽자식포인터)
      트리전체삭제(루트.오른쪽자식포인터)
      메모리해제(루트)
    return NULL
  끝

함수 트리복사(루트):
  시작
    if 루트 == NULL:
      return NULL
    
    새노드 = 새노드생성(루트.데이터)
    새노드.왼쪽자식포인터 = 트리복사(루트.왼쪽자식포인터)
    새노드.오른쪽자식포인터 = 트리복사(루트.오른쪽자식포인터)
    
    return 새노드
  끝
