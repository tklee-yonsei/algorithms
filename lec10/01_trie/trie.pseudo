// trie.pseudo

// Trie 노드 구조
구조 TrieNode:
  시작
    children[26]     // a-z를 위한 배열 (포인터)
    hasValue         // 값이 저장되어 있는지 확인
    value           // 실제 저장할 값 (빈도수, 점수 등)
  끝

함수 createTrieNode():
  시작
    // 새로운 Trie 노드 생성 및 초기화
    node = 새로운 TrieNode 할당
    
    for i = 0 to 25:
      node.children[i] = NULL
    
    node.hasValue = false
    node.value = 0
    
    return node
  끝

함수 insert(root, word, value):
  시작
    // Trie에 단어와 값을 삽입
    // root: Trie의 루트 노드, word: 삽입할 단어, value: 저장할 값
    
    if root == NULL:
      return NULL
    
    current = root
    wordLen = length(word)
    
    for i = 0 to wordLen-1:
      index = word[i] - 'a'  // 문자를 인덱스로 변환 (a=0, b=1, ...)
      
      if current.children[index] == NULL:
        current.children[index] = createTrieNode()
      
      current = current.children[index]
    
    // 단어의 끝에서 값 저장
    current.hasValue = true
    current.value = value
    
    return true
  끝

함수 search(root, word):
  시작
    // Trie에서 단어 검색
    // root: Trie의 루트 노드, word: 검색할 단어
    // 반환: 값이 있으면 해당 값, 없으면 -1
    
    if root == NULL:
      return -1
    
    current = root
    wordLen = length(word)
    
    for i = 0 to wordLen-1:
      index = word[i] - 'a'
      
      if current.children[index] == NULL:
        return -1  // 경로가 존재하지 않음
      
      current = current.children[index]
    
    if current.hasValue == true:
      return current.value
    else:
      return -1  // 단어는 존재하지만 값이 저장되지 않음
  끝

함수 startsWith(root, prefix):
  시작
    // 주어진 prefix로 시작하는 단어들이 있는지 확인
    // root: Trie의 루트 노드, prefix: 검색할 접두사
    // 반환: 존재하면 true, 없으면 false
    
    if root == NULL:
      return false
    
    current = root
    prefixLen = length(prefix)
    
    for i = 0 to prefixLen-1:
      index = prefix[i] - 'a'
      
      if current.children[index] == NULL:
        return false
      
      current = current.children[index]
    
    return true  // 접두사 경로가 존재함
  끝

함수 hasChildren(node):
  시작
    // 노드가 자식을 가지고 있는지 확인
    
    if node == NULL:
      return false
    
    for i = 0 to 25:
      if node.children[i] != NULL:
        return true
    
    return false
  끝

함수 deleteHelper(root, word, index, wordLen):
  시작
    // 삭제 헬퍼 함수 (재귀적 구현)
    // root: 현재 노드, word: 삭제할 단어, index: 현재 문자 인덱스, wordLen: 단어 길이
    // 반환: 현재 노드를 삭제해야 하면 true, 아니면 false
    
    if root == NULL:
      return false
    
    // 단어의 끝에 도달한 경우
    if index == wordLen:
      // 값이 저장되어 있지 않다면 삭제할 것이 없음
      if root.hasValue == false:
        return false
      
      // 값을 제거
      root.hasValue = false
      root.value = 0
      
      // 자식이 없다면 이 노드는 삭제 가능
      return hasChildren(root) == false
    
    charIndex = word[index] - 'a'
    shouldDeleteChild = deleteHelper(root.children[charIndex], word, index + 1, wordLen)
    
    if shouldDeleteChild == true:
      // 자식 노드 삭제
      delete root.children[charIndex]
      root.children[charIndex] = NULL
      
      // 현재 노드도 삭제 가능한지 확인
      // (값이 없고 다른 자식도 없다면 삭제 가능)
      return root.hasValue == false and hasChildren(root) == false
    
    return false
  끝

함수 deleteWord(root, word):
  시작
    // Trie에서 단어 삭제
    // root: Trie의 루트 노드, word: 삭제할 단어
    // 반환: 성공하면 true, 실패하면 false
    
    if root == NULL or word == NULL:
      return false
    
    wordLen = length(word)
    deleteHelper(root, word, 0, wordLen)
    
    return true
  끝

함수 getAllWordsHelper(node, prefix, results):
  시작
    // 주어진 노드 이하의 모든 단어를 수집하는 헬퍼 함수
    
    if node == NULL:
      return
    
    // 현재 노드에 값이 저장되어 있다면 결과에 추가
    if node.hasValue == true:
      add (prefix, node.value) to results
    
    // 모든 자식 노드에 대해 재귀 호출
    for i = 0 to 25:
      if node.children[i] != NULL:
        char = 'a' + i
        newPrefix = prefix + char
        getAllWordsHelper(node.children[i], newPrefix, results)
  끝

함수 getAllWords(root):
  시작
    // Trie의 모든 단어와 값을 반환
    // root: Trie의 루트 노드
    // 반환: (단어, 값) 쌍의 리스트
    
    results = 빈 리스트
    
    if root != NULL:
      getAllWordsHelper(root, "", results)
    
    return results
  끝

함수 getWordsWithPrefix(root, prefix):
  시작
    // 주어진 접두사로 시작하는 모든 단어와 값을 반환
    // root: Trie의 루트 노드, prefix: 검색할 접두사
    // 반환: (단어, 값) 쌍의 리스트
    
    results = 빈 리스트
    
    if root == NULL:
      return results
    
    // prefix에 해당하는 노드로 이동
    current = root
    prefixLen = length(prefix)
    
    for i = 0 to prefixLen-1:
      index = prefix[i] - 'a'
      
      if current.children[index] == NULL:
        return results  // 접두사가 존재하지 않음
      
      current = current.children[index]
    
    // 해당 노드 이하의 모든 단어 수집
    getAllWordsHelper(current, prefix, results)
    
    return results
  끝

함수 destroyTrie(root):
  시작
    // Trie의 모든 노드를 메모리에서 해제
    
    if root == NULL:
      return
    
    // 모든 자식 노드를 먼저 해제
    for i = 0 to 25:
      if root.children[i] != NULL:
        destroyTrie(root.children[i])
    
    // 현재 노드 해제
    delete root
  끝

함수 printTrie(root, prefix, depth):
  시작
    // Trie 구조를 시각적으로 출력 (디버깅용)
    
    if root == NULL:
      return
    
    // 들여쓰기 출력
    for i = 0 to depth-1:
      print "  "
    
    if depth > 0:
      print prefix[depth-1], ":"
    else:
      print "ROOT:"
    
    if root.hasValue == true:
      print " [값:", root.value, "]"
    
    print newline
    
    // 모든 자식에 대해 재귀 출력
    for i = 0 to 25:
      if root.children[i] != NULL:
        char = 'a' + i
        newPrefix = prefix + char
        printTrie(root.children[i], newPrefix, depth + 1)
  끝

// 메인 알고리즘
함수 main():
  시작
    // Trie 생성 및 테스트
    root = createTrieNode()
    
    print "=== Trie 데이터 구조 테스트 ==="
    print ""
    
    // 테스트 데이터 삽입
    testWords = [("apple", 10), ("app", 5), ("application", 20), 
                 ("apply", 8), ("banana", 15), ("band", 12), ("bandana", 18)]
    
    print "=== 단어 삽입 테스트 ==="
    for each (word, value) in testWords:
      insert(root, word, value)
      print "삽입:", word, "값:", value
    print ""
    
    // 검색 테스트
    print "=== 검색 테스트 ==="
    searchWords = ["apple", "app", "application", "appl", "banana", "cat"]
    
    for each word in searchWords:
      result = search(root, word)
      if result != -1:
        print "검색:", word, "-> 찾음, 값:", result
      else:
        print "검색:", word, "-> 없음"
    print ""
    
    // 접두사 검색 테스트
    print "=== 접두사 검색 테스트 ==="
    prefixes = ["app", "ban", "cat", "a"]
    
    for each prefix in prefixes:
      exists = startsWith(root, prefix)
      if exists == true:
        print "접두사:", prefix, "-> 존재함"
        words = getWordsWithPrefix(root, prefix)
        print "  관련 단어들:", words
      else:
        print "접두사:", prefix, "-> 존재하지 않음"
    print ""
    
    // Trie 구조 출력
    print "=== Trie 구조 출력 ==="
    printTrie(root, "", 0)
    print ""
    
    // 삭제 테스트
    print "=== 삭제 테스트 ==="
    deleteWords = ["app", "banana"]
    
    for each word in deleteWords:
      print "삭제 전 검색:", word, "->", search(root, word)
      deleteWord(root, word)
      print "삭제 후 검색:", word, "->", search(root, word)
      print ""
    
    // 전체 단어 출력
    print "=== 남은 모든 단어 출력 ==="
    allWords = getAllWords(root)
    for each (word, value) in allWords:
      print word, ":", value
    print ""
    
    // 메모리 해제
    destroyTrie(root)
    
    print "테스트 완료"
  끝